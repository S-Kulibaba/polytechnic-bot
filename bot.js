require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");

const token = process.env.TELEGRAM_BOT_TOKEN;
const adminChatId = process.env.ADMIN_CHAT_ID;

if (!token || !adminChatId) {
  console.error(
    "–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TELEGRAM_BOT_TOKEN –∞–±–æ ADMIN_CHAT_ID —É —Ñ–∞–π–ª—ñ .env"
  );
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

const userState = {};

const messageToUserMap = {};

const welcomeText = `<b>–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –ù–µ–π—Ä–æ–Ω, —Ç–≤—ñ–π –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫ —É —Å–≤—ñ—Ç –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏—Ö –Ω–∞—É–∫.</b>
–Ø –Ω–∞—Ä–æ–¥–∏–≤—Å—è –Ω–∞ –∫–∞—Ñ–µ–¥—Ä—ñ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö —Å–∏—Å—Ç–µ–º —ñ –∑–Ω–∞—é –≤—Å–µ –ø—Ä–æ –Ü–¢ üåç

–ù–∞—à–∞ –∫–∞—Ñ–µ–¥—Ä–∞ ‚Äî —á–∞—Å—Ç–∏–Ω–∞ <b>–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É "–û–¥–µ—Å—å–∫–∞ –ø–æ–ª—ñ—Ç–µ—Ö–Ω—ñ–∫–∞"</b>, –Ü–Ω—Å—Ç–∏—Ç—É—Ç—É –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏—Ö —Å–∏—Å—Ç–µ–º üß†üíª

üéì –ú–∏ –≥–æ—Ç—É—î–º–æ —Ñ–∞—Ö—ñ–≤—Ü—ñ–≤ –∑—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ <b>122 ‚Äî –ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –Ω–∞—É–∫–∏ (F3)</b>
–¶–µ –æ–¥–Ω–∞ –∑ –Ω–∞–π–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç–µ–π —Å—å–æ–≥–æ–¥–µ–Ω–Ω—è —Ç–∞ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ!

üí° –£ –Ω–∞—Å —Ç–∏ –Ω–∞–≤—á–∏—à—Å—è –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞—Ç–∏ ‚Äî —Ç–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏–º–µ—à —Ä–µ–∞–ª—å–Ω—ñ –Ü–¢-—Ä—ñ—à–µ–Ω–Ω—è, –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ—à —ñ–∑ —à—Ç—É—á–Ω–∏–º —ñ–Ω—Ç–µ–ª–µ–∫—Ç–æ–º, —Å—É—á–∞—Å–Ω–∏–º–∏ –º–æ–≤–∞–º–∏, –º–æ–±—ñ–ª—å–Ω–æ—é —Ç–∞ –≤–µ–±-—Ä–æ–∑—Ä–æ–±–∫–æ—é.

üîó <b>–ù–∞—à Telegram-–∫–∞–Ω–∞–ª:</b> <a href="https://t.me/is122_ics">t.me/is122_ics</a>
üîó <b>Facebook:</b> <a href="https://facebook.com/isonpu">facebook.com/isonpu</a>
üîó <b>–°–∞–π—Ç –∫–∞—Ñ–µ–¥—Ä–∏:</b> <a href="https://op.edu.ua/kaf-is">op.edu.ua/kaf-is</a>

üëá –û–±–µ—Ä–∏, —â–æ —Ü—ñ–∫–∞–≤–∏—Ç—å –¥–∞–ª—ñ:`;

const welcomeImage = "./img/image.png";

const welcomeKeyboard = {
  inline_keyboard: [
    [{ text: "‚ÑπÔ∏è –ü—Ä–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å", callback_data: "about_specialty" }],
    [{ text: "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ –∫–∞—Ñ–µ–¥—Ä–∏", callback_data: "contacts" }],
  ],
};

const aboutText = `<b>üë®‚Äçüíª –©–æ —Ç–∏ —Ç—É—Ç –≤–∏–≤—á–∞—Ç–∏–º–µ—à?</b>
‚Ä¢ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, –∞–ª–≥–æ—Ä–∏—Ç–º–∏
‚Ä¢ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, –∫–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –º–µ—Ä–µ–∂—ñ
‚Ä¢ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç
‚Ä¢ –≤–µ–±- —ñ –º–æ–±—ñ–ª—å–Ω—É —Ä–æ–∑—Ä–æ–±–∫—É
‚Ä¢ —ñ–Ω–∂–µ–Ω–µ—Ä—ñ—é –ü–ó —Ç–∞ –∫—ñ–±–µ—Ä–±–µ–∑–ø–µ–∫—É

<b>üîç –î–ª—è –∫–æ–≥–æ —Ü–µ?</b>
–î–ª—è —Ç–∏—Ö, —Ö—Ç–æ —Ö–æ—á–µ:
‚Ä¢ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≤–µ–±-–¥–æ–¥–∞—Ç–∫–∏ —Ç–∞ —Å–∞–π—Ç–∏
‚Ä¢ —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ —Å—Ç–∞—Ä—Ç–∞–ø–∏
‚Ä¢ –±—É—Ç–∏ —á–∞—Å—Ç–∏–Ω–æ—é –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ IT

<b>üéØ –ù–∞–≤—ñ—â–æ?</b>
–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—é, —è–∫–∞ —Ä–µ–∞–ª—å–Ω–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —É —Å—É—á–∞—Å–Ω–æ–º—É —Å–≤—ñ—Ç—ñ —Ç–∞ –∑–º—ñ–Ω—é—î —Å–≤—ñ—Ç.
IT ‚Äî —Ü–µ –Ω–µ –º–∞–π–±—É—Ç–Ω—î. –¶–µ –≤–∂–µ —Ç–≤–æ—è —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—å.

üì• <b>–ó–∞–≤–∞–Ω—Ç–∞–∂ –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–∞–π–ª –∑ –æ–ø–∏—Å–æ–º —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ:</b>
<a href="https://example.com/specialty.pdf">[PDF-—Ñ–∞–π–ª —ñ–∑ –æ–ø–∏—Å–æ–º]</a> (–ó–∞–º—ñ–Ω—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª)`; //PDF-—Ñ–∞–π–ª —ñ–∑ –æ–ø–∏—Å–æ–º —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ

const aboutKeyboard = {
  inline_keyboard: [
    [{ text: "üöÄ –ö–∞—Ä'—î—Ä–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ", callback_data: "career" }],
    [{ text: "üåç –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ", callback_data: "international" }],
    [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_start" }],
  ],
};

const careerText = `<b>üöÄ –ö–ê–†'–Ñ–†–ù–Ü –ú–û–ñ–õ–ò–í–û–°–¢–Ü</b>
–¢–∏ –∑–º–æ–∂–µ—à —Ä–æ–∑–≤–∏–≤–∞—Ç–∏—Å—è —è–∫ —Ñ–∞—Ö—ñ–≤–µ—Ü—å —Ä—ñ–≤–Ω—è:
<b>Junior ‚Üí Middle ‚Üí Senior</b>

<b>üîß –û–±–∏—Ä–∞–π –Ω–∞–ø—Ä—è–º –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏:</b>
‚Ä¢ Software Developer
‚Ä¢ Mobile Developer (iOS/Android)
‚Ä¢ Frontend / Backend / Fullstack Developer
‚Ä¢ QA / QC Engineer
‚Ä¢ System Administrator
‚Ä¢ Database Developer / Administrator
‚Ä¢ System Analyst
‚Ä¢ Data Scientist
‚Ä¢ Intelligent Systems Developer

üéØ –ó–Ω–∞–Ω–Ω—è + –ø—Ä–∞–∫—Ç–∏–∫–∞ = —Å–∏–ª—å–Ω–µ IT-–ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ —â–µ –¥–æ –≤–∏–ø—É—Å–∫—É!`;

const careerKeyboard = {
  inline_keyboard: [
    [{ text: "üîô –ù–∞–∑–∞–¥ –¥–æ –æ–ø–∏—Å—É", callback_data: "about_specialty" }],
    [{ text: "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ –∫–∞—Ñ–µ–¥—Ä–∏", callback_data: "contacts" }],
  ],
};

const internationalText = `<b>üåç –•–æ—á–µ—à –Ω–∞–≤—á–∞—Ç–∏—Å—è –∑–∞ —î–≤—Ä–æ–ø–µ–π—Å—å–∫–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏?</b>
–ó –Ω–∞–º–∏ ‚Äî —Ü–µ —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—å:
‚Ä¢ –ø–æ–¥–≤—ñ–π–Ω—ñ –¥–∏–ø–ª–æ–º–∏ –∑ –í–ù–ó –Ñ–≤—Ä–æ–ø–∏
‚Ä¢ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –æ–±–º—ñ–Ω—É
‚Ä¢ —Å—Ç–∞–∂—É–≤–∞–Ω–Ω—è –≤ –Ü–¢-–∫–æ–º–ø–∞–Ω—ñ—è—Ö
‚Ä¢ –∞–Ω–≥–ª–æ–º–æ–≤–Ω—ñ –∫—É—Ä—Å–∏
‚Ä¢ —Ä–æ–±–æ—Ç–∞ –∑ —ñ–Ω–æ–∑–µ–º–Ω–∏–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏

üöÄ –ö–∞—Ä'—î—Ä–∞ –≤ –Ü–¢ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –≤–∂–µ —Ç—É—Ç!`;

const internationalKeyboard = {
  inline_keyboard: [
    [{ text: "üîô –ù–∞–∑–∞–¥ –¥–æ –æ–ø–∏—Å—É", callback_data: "about_specialty" }],
    [{ text: "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ –∫–∞—Ñ–µ–¥—Ä–∏", callback_data: "contacts" }],
  ],
};

const contactsText = `<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ –∫–∞—Ñ–µ–¥—Ä–∏ –Ü–°</b>
üìß <b>Email:</b> kaf.is@op.edu.ua
‚òéÔ∏è <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +38 (048) 705-85-86
üåê <b>–°–∞–π—Ç:</b> <a href="https://op.edu.ua/kaf-is">op.edu.ua/kaf-is</a>`;

const contactsKeyboard = {
  inline_keyboard: [
    [{ text: "üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º", callback_data: "write_to_us" }],
    [{ text: "üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data: "back_to_start" }],
  ],
};

const writeToUsText = `–û–±–µ—Ä–∏, —è–∫ –∑—Ä—É—á–Ω–æ –∑–≤'—è–∑–∞—Ç–∏—Å—è:`;
const writeToUsKeyboard = {
  inline_keyboard: [
    // –ó–∞–º—ñ–Ω—ñ—Ç—å USERNAME_ADMIN –Ω–∞ –Ω—ñ–∫–Ω–µ–π–º –∞–¥–º—ñ–Ω–∞
    [{ text: "‚úàÔ∏è Telegram-—á–∞—Ç", url: "https://t.me/USERNAME_ADMIN" }],
    [{ text: "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ —Ç—É—Ç (–±–æ—Ç—É)", callback_data: "write_via_bot" }],
    [{ text: "üîô –ù–∞–∑–∞–¥ –¥–æ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤", callback_data: "contacts" }],
  ],
};

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendPhoto(chatId, welcomeImage, {
    caption: welcomeText,
    parse_mode: "HTML",
    reply_markup: welcomeKeyboard,
  });
});

bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const data = query.data;

  bot.answerCallbackQuery(query.id);

  let text;
  let keyboard;

  switch (data) {
    case "about_specialty":
      text = aboutText;
      keyboard = aboutKeyboard;
      break;
    case "career":
      text = careerText;
      keyboard = careerKeyboard;
      break;
    case "international":
      text = internationalText;
      keyboard = internationalKeyboard;
      break;
    case "contacts":
      text = contactsText;
      keyboard = contactsKeyboard;
      break;
    case "write_to_us":
      text = writeToUsText;
      keyboard = writeToUsKeyboard;
      break;
    case "write_via_bot":
      userState[chatId] = "awaiting_question";
      bot.sendMessage(
        chatId,
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º. –Ø –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É."
      );
      return;
    case "back_to_start":
      bot
        .deleteMessage(chatId, messageId)
        .catch((err) => console.log(err.message));
      bot.sendPhoto(chatId, welcomeImage, {
        caption: welcomeText,
        parse_mode: "HTML",
        reply_markup: welcomeKeyboard,
      });
      return;
  }

  bot
    .editMessageText(text, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: "HTML",
      reply_markup: keyboard,
      disable_web_page_preview: true,
    })
    .catch((error) => {
      if (
        error.code === "ETELEGRAM" &&
        error.message.includes("message is not modified") === false
      ) {
        bot
          .deleteMessage(chatId, messageId)
          .catch((err) => console.log(err.message));
        bot.sendMessage(chatId, text, {
          parse_mode: "HTML",
          reply_markup: keyboard,
          disable_web_page_preview: true,
        });
      } else {
        if (error.message.includes("message is not modified") === false) {
          console.error("Error editing message:", error.message);
        }
      }
    });
});

bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const messageId = msg.message_id;

  if (msg.text && msg.text.startsWith("/")) {
    return;
  }

  if (chatId == adminChatId && msg.reply_to_message) {
    const repliedMessageId = msg.reply_to_message.message_id;

    if (messageToUserMap[repliedMessageId]) {
      const originalUserId = messageToUserMap[repliedMessageId];
      const adminReply = msg.text;

      bot.sendMessage(
        originalUserId,
        `<b>üìß –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n${adminReply}`,
        { parse_mode: "HTML" }
      );

      bot.sendMessage(adminChatId, "‚úÖ –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.", {
        reply_to_message_id: messageId,
      });

      delete messageToUserMap[repliedMessageId];

      return;
    }
  }

  if (userState[chatId] === "awaiting_question") {
    const userQuestion = msg.text;
    const userName = msg.from.username
      ? `@${msg.from.username}`
      : `${msg.from.first_name} ${msg.from.last_name || ""}`;

    const messageToAdmin = `<b>–ù–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userName} (ID: ${chatId})</b>\n\n"${userQuestion}"

<i>–©–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é Reply –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.</i>`;

    bot
      .sendMessage(adminChatId, messageToAdmin, { parse_mode: "HTML" })
      .then((sentMessage) => {
        messageToUserMap[sentMessage.message_id] = chatId;
      });

    bot.sendMessage(
      chatId,
      "‚úÖ –î—è–∫—É—é! –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –í–∞–º –¥–∞–¥—É—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
    );

    delete userState[chatId];
  }
});

console.log('–ë–æ—Ç "–ù–µ–π—Ä–æ–Ω" —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π!');
